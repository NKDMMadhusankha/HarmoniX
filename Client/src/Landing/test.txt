import React, { useEffect, useRef } from 'react';
import { 
  Box, 
  Typography, 
  Container,
  Grid,
  useTheme,
  useMediaQuery,
  Button
} from '@mui/material';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import { motion, useScroll, useTransform, useSpring, useInView } from 'framer-motion';
import styled from '@emotion/styled';
import { useNavigate } from 'react-router-dom';

// Import Navbar and Footer components
import Navbar from '../Components/Navbar';
import Footer from '../Components/Footer';

// Import assets (you'll need to update these with your actual image paths)
import producerStudio from '../assets/ab2.png';
import musicEquipment from '../assets/ab3.png';
import daw from '../assets/ab4.png';
import mixingConsole from '../assets/ab5.png';

// Magnetic component that wraps children
const MagneticElement = ({ children }) => {
  return (
    <Box sx={{ display: 'inline-block' }}>
      {children}
    </Box>
  );
};

// Text reveal animation for headings
const TextReveal = ({ children, delay = 0 }) => {
  const text = children.split('');
  
  const container = {
    hidden: { opacity: 0 },
    visible: (i = 1) => ({
      opacity: 1,
      transition: { staggerChildren: 0.05, delayChildren: delay * i },
    }),
  };
  
  const child = {
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        type: 'spring',
        damping: 12,
        stiffness: 100,
      },
    },
    hidden: {
      opacity: 0,
      y: 20,
      transition: {
        type: 'spring',
        damping: 12,
        stiffness: 100,
      },
    },
  };
  
  return (
    <motion.div
      style={{ display: 'flex', overflow: 'hidden' }}
      variants={container}
      initial="hidden"
      whileInView="visible"
      viewport={{ once: true, amount: 0.3 }}
    >
      {text.map((char, index) => (
        <motion.span key={index} variants={child}>
          {char === ' ' ? '\u00A0' : char}
        </motion.span>
      ))}
    </motion.div>
  );
};

// Split reveal animation for text
const SplitReveal = ({ children, delay = 0 }) => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.3 });
  
  // Split text into words
  const words = children.split(" ");
  
  return (
    <motion.div
      ref={ref}
      style={{ overflow: 'hidden', display: 'flex', flexWrap: 'wrap' }}
    >
      {words.map((word, i) => (
        <motion.span
          key={i}
          style={{ 
            display: 'inline-block',
            marginRight: '0.25em',
            overflow: 'hidden'
          }}
          initial={{ opacity: 0, y: 50 }}
          animate={isInView ? { 
            opacity: 1, 
            y: 0,
            transition: {
              duration: 0.7,
              delay: delay + (i * 0.05),
              ease: [0.25, 0.1, 0.25, 1.0]
            }
          } : {}}
        >
          {word}
        </motion.span>
      ))}
    </motion.div>
  );
};

// Enhanced jumping text animation component
const JumpingText = ({ text, color = "#3a9bdc", delay = 0 }) => {
  const letters = text.split("");
  
  return (
    <Box component="span" sx={{ display: "inline-flex", mx: 1, position: "relative" }}>
      {letters.map((letter, index) => {
        // Create different animation patterns based on letter position
        const isEven = index % 2 === 0;
        const animationPattern = index % 3;
        
        return (
          <motion.span
            key={index}
            style={{ 
              display: "inline-block",
              color: color,
              textShadow: `0 0 10px ${color}40, 0 0 20px ${color}30, 0 0 30px ${color}20`,
              position: "relative"
            }}
            initial={{ y: 0, scale: 1, rotate: 0 }}
            animate={{ 
              y: animationPattern === 0 ? [0, -12, 0] : animationPattern === 1 ? [0, -8, 0] : [0, -15, 0],
              scale: [1, isEven ? 1.1 : 1.15, 1],
              rotate: [0, isEven ? 3 : -3, 0],
              transition: {
                duration: 2,
                ease: "easeInOut",
                delay: delay + index * 0.06,
                repeat: Infinity,
                repeatDelay: 3 + (index * 0.3)
              }
            }}
            whileHover={{
              scale: 1.3,
              rotate: isEven ? 10 : -10,
              color: '#ffffff',
              textShadow: `0 0 15px ${color}, 0 0 25px ${color}`,
              transition: { duration: 0.3 }
            }}
          >
            {letter === " " ? "\u00A0" : letter}
          </motion.span>
        );
      })}
    </Box>
  );
};

// Reveal section with staggered children animation
const RevealSection = ({ children, direction = 'up', staggerChildren = 0.1, delay = 0 }) => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.2 });
  
  const variants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren,
        delayChildren: delay
      }
    }
  };
  
  const childVariants = {
    hidden: direction === 'up' 
      ? { y: 50, opacity: 0 } 
      : direction === 'down' 
        ? { y: -50, opacity: 0 }
        : direction === 'left'
          ? { x: 50, opacity: 0 }
          : direction === 'right'
            ? { x: -50, opacity: 0 }
            : { scale: 0.95, opacity: 0 },
    visible: {
      y: 0,
      x: 0,
      scale: 1,
      opacity: 1,
      transition: {
        duration: 0.8,
        ease: [0.25, 0.1, 0.25, 1.0]
      }
    }
  };
  
  return (
    <motion.div
      ref={ref}
      initial="hidden"
      animate={isInView ? "visible" : "hidden"}
      variants={variants}
    >
      {React.Children.map(children, child => (
        <motion.div variants={childVariants}>
          {child}
        </motion.div>
      ))}
    </motion.div>
  );
};

// Liquid button effect
const LiquidButton = styled(Box)`
  position: relative;
  padding: 16px 32px;
  background: linear-gradient(135deg, #3a9bdc 0%,rgb(74, 118, 220) 100%);
  border-radius: 50px;
  overflow: hidden;
  cursor: pointer;
  transition: all 0.5s ease;
  
  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg,rgb(74, 132, 220) 0%, #3a9bdc 100%);
    opacity: 0;
    transition: opacity 0.5s ease;
  }
  
  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 25px rgba(58, 155, 220, 0.5);
    
    &:before {
      opacity: 1;
    }
  }
`;

// Image wrapper with advanced hover effects - removed floating animation
const EnhancedImage = ({ src, alt, index }) => {
  const imageRef = useRef(null);
  const isInView = useInView(imageRef, { once: false, amount: 0.3 });
  
  // Different animation variations based on index
  const variants = [
    {
      hidden: { scale: 0.8, rotate: -5, opacity: 0 },
      visible: { 
        scale: 1, 
        rotate: 0, 
        opacity: 1, 
        transition: { 
          duration: 0.8, 
          ease: "easeOut",
          delay: index * 0.2 
        } 
      }
    },
    {
      hidden: { scale: 1.2, opacity: 0, filter: "blur(10px)" },
      visible: { scale: 1, opacity: 1, filter: "blur(0px)", transition: { duration: 0.8, ease: "easeOut" } },
    },
    {
      hidden: { y: 100, opacity: 0 },
      visible: { y: 0, opacity: 1, transition: { duration: 0.8, type: "spring", stiffness: 50 } },
    },
    {
      hidden: { x: -100, opacity: 0, rotate: -10 },
      visible: { x: 0, opacity: 1, rotate: 0, transition: { duration: 0.8, ease: "easeOut" } },
    }
  ];
  
  const variantToUse = variants[index % variants.length];
  
  return (
    <motion.div
      ref={imageRef}
      initial="hidden"
      animate={isInView ? "visible" : "hidden"}
      variants={variantToUse}
      style={{ position: 'relative', perspective: '1000px' }}
    >
      <Box
        component="img"
        src={src}
        alt={alt}
        sx={{
          width: '100%',
          borderRadius: '12px',
        }}
      />
      <Box
        sx={{
          position: 'absolute',
          top: 0,
          left: 0,
          width: '100%',
          height: '100%',
          borderRadius: '12px',
          background: 'linear-gradient(135deg, rgba(58, 155, 220, 0.4) 0%, rgba(74, 91, 220, 0.1) 100%)',
          opacity: 0,
        }}
      />
    </motion.div>
  );
};

// Scroll-triggered section component
const ScrollSection = ({ children, direction = 'up', delay = 0, duration = 0.8 }) => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.3 });
  
  const directionVariants = {
    up: {
      hidden: { y: 100, opacity: 0 },
      visible: { y: 0, opacity: 1 }
    },
    down: {
      hidden: { y: -100, opacity: 0 },
      visible: { y: 0, opacity: 1 }
    },
    left: {
      hidden: { x: 100, opacity: 0 },
      visible: { x: 0, opacity: 1 }
    },
    right: {
      hidden: { x: -100, opacity: 0 },
      visible: { x: 0, opacity: 1 }
    },
    scale: {
      hidden: { scale: 0.8, opacity: 0 },
      visible: { scale: 1, opacity: 1 }
    }
  };
  
  return (
    <motion.div
      ref={ref}
      initial="hidden"
      animate={isInView ? "visible" : "hidden"}
      variants={directionVariants[direction]}
      transition={{ duration: duration, delay: delay, ease: [0.25, 0.1, 0.25, 1.0] }}
    >
      {children}
    </motion.div>
  );
};

// 3D Card component
const Card3D = ({ children }) => {
  const ref = useRef(null);
  const [rotateX, setRotateX] = React.useState(0);
  const [rotateY, setRotateY] = React.useState(0);
  
  const handleMouseMove = (e) => {
    if (!ref.current) return;
    
    const rect = ref.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    const centerX = rect.width / 2;
    const centerY = rect.height / 2;
    
    // Calculate rotation values (limited to a subtle effect)
    const rotateXValue = -((y - centerY) / centerY) * 7;
    const rotateYValue = ((x - centerX) / centerX) * 7;
    
    setRotateX(rotateXValue);
    setRotateY(rotateYValue);
  };
  
  const handleMouseLeave = () => {
    setRotateX(0);
    setRotateY(0);
  };
  
  return (
    <motion.div
      ref={ref}
      onMouseMove={handleMouseMove}
      onMouseLeave={handleMouseLeave}
      style={{
        transformStyle: 'preserve-3d',
        perspective: '1000px',
        transform: `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`,
        transition: 'transform 0.1s ease-out',
      }}
    >
      {children}
    </motion.div>
  );
};

// Main page component
const MusicProducingPage = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));
  const mainRef = useRef(null);
  const { scrollYProgress } = useScroll({ target: mainRef });
  const navigate = useNavigate();
  
  const smoothProgress = useSpring(scrollYProgress, {
    stiffness: 100,
    damping: 30,
    restDelta: 0.001
  });
  
  useEffect(() => {
    window.scrollTo(0, 0);
    
    // Add smooth scrolling to the body
    document.body.style.scrollBehavior = 'smooth';
    
    return () => {
      document.body.style.scrollBehavior = 'auto';
    };
  }, []);

  // Scroll progress indicator
  const progressBarScaleX = useTransform(smoothProgress, [0, 1], [0, 1]);

  // Replace the button's onClick function
  const handleNavigateToMixing = () => {
    navigate('/music/producer');
  };

  return (
    <Box ref={mainRef} sx={{ bgcolor: '#000', color: '#fff', minHeight: '100vh', overflowX: 'hidden' }}>
      <Navbar />
      
      {/* Progress bar */}
      <motion.div
        style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          height: '4px',
          background: 'linear-gradient(90deg, #3a9bdc, #4a5bdc)',
          transformOrigin: '0%',
          scaleX: progressBarScaleX,
          zIndex: 9999,
        }}
      />
      
      <Container maxWidth={false} sx={{ 
        py: 8,
        px: isSmallScreen ? 2 : isMobile ? 4 : 8,
        maxWidth: '1300px',
        mx: 'auto'
      }}>
        {/* Hero section */}
        <Box 
          my={0}
          pt={isMobile ? 12 : 18}  // Further increased padding-top to push content even lower
          mt={0}
          sx={{ 
            mb: isMobile ? 12 : 18  // Increased margin-bottom for more space below
          }}
        >
          <RevealSection staggerChildren={0.15}>
            <Typography 
              variant={isSmallScreen ? "h3" : "h2"} 
              align="center" 
              mb={3}
              sx={{
                fontWeight: 600,
                letterSpacing: '0.02em',
                display: "flex",
                justifyContent: "center",
                flexWrap: "wrap"
              }}
            >
              The Art of <JumpingText text="Music Production" delay={0.5} />
            </Typography>
            
            <Typography 
              variant="body1" 
              mb={6}
              sx={{
                fontSize: isSmallScreen ? '1.1rem' : '1.25rem',
                maxWidth: '800px',
                mx: 'auto',
                opacity: 0.9,
                lineHeight: 1.6,
                textAlign: 'left',
                justifyContent: 'center',
              }}
            >
              <SplitReveal delay={0.6} >
                The transformative process of crafting sonic experiences, combining technical expertise with creative vision to shape raw musical ideas into polished, professional productions.
              </SplitReveal>
            </Typography>
          </RevealSection>
        </Box>
      
        {/* What is Music Production Section */}
        <Box my={isMobile ? 6 : 8}>
          <ScrollSection direction="up">
            <Grid container alignItems="center" spacing={isMobile ? 4 : 6} mb={isMobile ? 4 : 6}>
              {isMobile ? (
                <>
                  <Grid item xs={12}>
                    <EnhancedImage 
                      src={producerStudio} 
                      alt="Music producer in studio"
                      index={0}
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <ScrollSection direction="right" delay={0.2}>
                      <Typography variant={isSmallScreen ? "h6" : "h5"} mb={2} color="#3a9bdc">
                        <TextReveal>What Is Music Producing?</TextReveal>
                      </Typography>
                      <Typography variant="body1" sx={{ fontSize: isSmallScreen ? '1rem' : '1.1rem', lineHeight: 1.7 }}>
                        Music producing is the art and process of creating a complete piece of music from scratch or from a basic idea. A music producer is like both a director and a creative partner — they guide the overall sound, style, and feel of a song. They work on everything from composing melodies and building beats to arranging instruments and helping artists bring their vision to life.<br/><br/>Good music producing is not just about technical skills; it's about having a strong sense of musicality, creativity, and the ability to turn raw ideas into something polished and professional. Whether it's a pop song, a rap track, an acoustic ballad, or an electronic anthem, the producer shapes the journey from idea to reality.
                      </Typography>
                    </ScrollSection>
                  </Grid>
                </>
              ) : (
                <>
                  <Grid item md={6}>
                    <ScrollSection direction="right" delay={0.2}>
                      <Typography variant="h5" mb={2} color="#3a9bdc">
                        <TextReveal>What Is Music Producing?</TextReveal>
                      </Typography>
                      <Typography variant="body1" sx={{ fontSize: '1.1rem', lineHeight: 1.7 }}>
                        Music producing is the art and process of creating a complete piece of music from scratch or from a basic idea. A music producer is like both a director and a creative partner — they guide the overall sound, style, and feel of a song. They work on everything from composing melodies and building beats to arranging instruments and helping artists bring their vision to life.<br/><br/>Good music producing is not just about technical skills; it's about having a strong sense of musicality, creativity, and the ability to turn raw ideas into something polished and professional. Whether it's a pop song, a rap track, an acoustic ballad, or an electronic anthem, the producer shapes the journey from idea to reality.
                      </Typography>
                    </ScrollSection>
                  </Grid>
                  <Grid item md={6}>
                    <EnhancedImage 
                      src={producerStudio} 
                      alt="Music producer in studio"
                      index={0}
                    />
                  </Grid>
                </>
              )}
            </Grid>
          </ScrollSection>
        </Box>

        {/* Music Production Equipment Section with 3D card effect */}
        <Box my={isMobile ? 10 : 16}>
          <ScrollSection direction="up">
            <Grid container alignItems="center" spacing={isMobile ? 4 : 6} mb={isMobile ? 4 : 6}>
              {isMobile ? (
                <>
                  <Grid item xs={12}>
                    <ScrollSection direction="left" delay={0.3}>
                      <Typography variant={isSmallScreen ? "h6" : "h5"} mb={2} color="#3a9bdc">
                        <TextReveal>1. Song Creation and Composition</TextReveal>
                      </Typography>
                    </ScrollSection>
                    <Card3D>
                      <EnhancedImage 
                        src={musicEquipment} 
                        alt="Music production equipment"
                        index={1}
                      />
                    </Card3D>
                    <ScrollSection direction="right" delay={0.4}>
                      <Typography variant="body1" sx={{ fontSize: isSmallScreen ? '1rem' : '1.1rem', lineHeight: 1.7, mt: 2 }}>
                        This is the first stage, where the basic idea of the song is born. The producer helps create melodies, chord progressions, rhythms, and the overall vibe of the track. Sometimes the producer will start from scratch, building the song from a small idea, a lyric, or even just a mood. <br/><br/>
                        • They might work closely with artists, songwriters, or instrumentalists to develop the song's core elements.<br/><br/>• They decide on the key, tempo, style, and emotional tone.<br/><br/>In some cases, the producer themselves plays instruments or programs beats to form the early version of the song (called a demo).<br/><br/>At this stage, it's all about creativity and exploring different possibilities for how the song could sound.
                      </Typography>
                    </ScrollSection>
                  </Grid>
                </>
              ) : (
                <>
                  <Grid item md={6} order={{ md: 2 }}>
                    <ScrollSection direction="left" delay={0.3}>
                      <Typography variant="h5" mb={2} color="#3a9bdc">
                        <TextReveal>1. Song Creation and Composition</TextReveal>
                      </Typography>
                      <Typography variant="body1" sx={{ fontSize: '1.1rem', lineHeight: 1.7 }}>
                        This is the first stage, where the basic idea of the song is born. The producer helps create melodies, chord progressions, rhythms, and the overall vibe of the track. Sometimes the producer will start from scratch, building the song from a small idea, a lyric, or even just a mood. <br/><br/>
                        • They might work closely with artists, songwriters, or instrumentalists to develop the song's core elements.<br/><br/>• They decide on the key, tempo, style, and emotional tone.<br/><br/>In some cases, the producer themselves plays instruments or programs beats to form the early version of the song (called a demo).<br/><br/>At this stage, it's all about creativity and exploring different possibilities for how the song could sound.
                      </Typography>
                    </ScrollSection>
                  </Grid>
                  <Grid item md={6} order={{ md: 1 }}>
                    <Card3D>
                      <EnhancedImage 
                        src={musicEquipment} 
                        alt="Music production equipment"
                        index={1}
                      />
                    </Card3D>
                  </Grid>
                </>
              )}
            </Grid>
          </ScrollSection>
        </Box>

        {/* Digital Audio Workstations Section */}
        <Box my={isMobile ? 10 : 16}>
          <ScrollSection direction="scale">
            <Grid container alignItems="center" spacing={isMobile ? 4 : 6} mb={isMobile ? 4 : 6}>
              {isMobile ? (
                <>
                  <Grid item xs={12}>
                    <ScrollSection direction="right" delay={0.3}>
                      <Typography variant={isSmallScreen ? "h6" : "h5"} mb={2} color="#3a9bdc">
                        <TextReveal>2. Arrangement and Sound Design</TextReveal>
                      </Typography>
                    </ScrollSection>
                    <EnhancedImage 
                      src={daw} 
                      alt="Digital Audio Workstation interface"
                      index={2}
                    />
                    <ScrollSection direction="left" delay={0.4}>
                      <Typography variant="body1" sx={{ fontSize: isSmallScreen ? '1rem' : '1.1rem', lineHeight: 1.7, mt: 2 }}>
                        Once the basic idea is ready, the next part is arranging and designing the sounds. This is where the song starts to feel more full and structured.<br/><br/>
                        • Arrangement means deciding where different parts of the song happen — like when the drums kick in, when the chorus arrives, or when an instrumental break happens.<br/><br/>
                        • Producers think about the dynamics — how the song builds up and cools down to keep the listener interested.<br/><br/>
                        • Sound design involves choosing or creating the right sounds — for example, picking a warm piano, a powerful drum kit, or crafting a unique synth lead.<br/><br/>
                        • They might add additional layers like background vocals, electronic effects, or real-world sounds (like claps, snaps, or ambient textures).<br/><br/>
                        The goal here is to make the song exciting, emotional, and to tell a story through sound.
                      </Typography>
                    </ScrollSection>
                  </Grid>
                </>
              ) : (
                <>
                  <Grid item md={6}>
                    <ScrollSection direction="up" delay={0.3}>
                      <Typography variant="h5" mb={2} color="#3a9bdc">
                        <TextReveal>2. Arrangement and Sound Design</TextReveal>
                      </Typography>
                      <Typography variant="body1" sx={{ fontSize: '1.1rem', lineHeight: 1.7 }}>
                        Once the basic idea is ready, the next part is arranging and designing the sounds. This is where the song starts to feel more full and structured.<br/><br/>
                        • Arrangement means deciding where different parts of the song happen — like when the drums kick in, when the chorus arrives, or when an instrumental break happens.<br/><br/>
                        • Producers think about the dynamics — how the song builds up and cools down to keep the listener interested.<br/><br/>
                        • Sound design involves choosing or creating the right sounds — for example, picking a warm piano, a powerful drum kit, or crafting a unique synth lead.<br/><br/>
                        • They might add additional layers like background vocals, electronic effects, or real-world sounds (like claps, snaps, or ambient textures).<br/><br/>
                        The goal here is to make the song exciting, emotional, and to tell a story through sound.
                      </Typography>
                    </ScrollSection>
                  </Grid>
                  <Grid item md={6}>
                    <EnhancedImage 
                      src={daw} 
                      alt="Digital Audio Workstation interface"
                      index={2}
                    />
                  </Grid>
                </>
              )}
            </Grid>
          </ScrollSection>
        </Box>

        {/* Mixing and Mastering Section */}
        <Box my={isMobile ? 10 : 16}>
          <ScrollSection direction="up">
            <Grid container alignItems="center" spacing={isMobile ? 4 : 6}>
              {isMobile ? (
                <>
                  <Grid item xs={12}>
                    <ScrollSection direction="left" delay={0.3}>
                      <Typography variant={isSmallScreen ? "h6" : "h5"} mb={2} color="#3a9bdc">
                        <TextReveal>3. Production and Refinement</TextReveal>
                      </Typography>
                    </ScrollSection>
                    <EnhancedImage 
                      src={mixingConsole} 
                      alt="Audio mixing console"
                      index={3}
                    />
                    <ScrollSection direction="right" delay={0.4}>
                      <Typography variant="body1" sx={{ fontSize: isSmallScreen ? '1rem' : '1.1rem', lineHeight: 1.7, mt: 2 }}>
                        In this final producing stage, everything gets cleaned up, polished, and finalized as much as possible before moving into technical processes like mixing.<br/><br/>
                        • The producer listens carefully to how the elements blend together.<br/><br/>
                        • They may fine-tune the volume of instruments, adjust how certain sounds interact, and make sure nothing feels too empty or too crowded.<br/><br/>
                        • Sometimes, parts get added or removed to make the song tighter and more effective.<br/><br/>
                        • This stage also involves making rough versions (called rough mixes) so the song can be shared with mixing engineers later.<br/><br/>
                        At the end of the production phase, the song should already sound very close to a finished track — full, emotional, and professional — even before mixing and mastering happen.
                      </Typography>
                    </ScrollSection>
                  </Grid>
                </>
              ) : (
                <>
                  <Grid item md={6} order={{ md: 2 }}>
                    <ScrollSection direction="right" delay={0.3}>
                      <Typography variant="h5" mb={2} color="#3a9bdc">
                        <TextReveal>3. Production and Refinement</TextReveal>
                      </Typography>
                      <Typography variant="body1" sx={{ fontSize: '1.1rem', lineHeight: 1.7 }}>
                        In this final producing stage, everything gets cleaned up, polished, and finalized as much as possible before moving into technical processes like mixing.<br/><br/>
                        • The producer listens carefully to how the elements blend together.<br/><br/>
                        • They may fine-tune the volume of instruments, adjust how certain sounds interact, and make sure nothing feels too empty or too crowded.<br/><br/>
                        • Sometimes, parts get added or removed to make the song tighter and more effective.<br/><br/>
                        • This stage also involves making rough versions (called rough mixes) so the song can be shared with mixing engineers later.<br/><br/>
                        At the end of the production phase, the song should already sound very close to a finished track — full, emotional, and professional — even before mixing and mastering happen.
                      </Typography>
                      
                      <Box mt={4} display="flex" justifyContent={isSmallScreen ? "center" : "flex-start"}>
                        <Button 
                          variant="contained" 
                          color="primary"
                          endIcon={<ArrowForwardIcon />}
                          sx={{
                            background: 'linear-gradient(90deg, #3a9bdc 0%,rgb(74, 125, 220) 100%)',
                            padding: '10px 24px',
                            fontWeight: 600,
                            '&:hover': {
                              background: 'linear-gradient(90deg,rgb(37, 123, 181) 0%,rgb(58, 138, 203) 100%)',
                            }
                          }}
                          onClick={handleNavigateToMixing}
                        >
                          Get Your Music Producer
                        </Button>
                      </Box>
                    </ScrollSection>
                  </Grid>
                  <Grid item md={6} order={{ md: 1 }}>
                    <EnhancedImage 
                      src={mixingConsole} 
                      alt="Audio mixing console"
                      index={3}
                    />
                  </Grid>
                </>
              )}
            </Grid>
          </ScrollSection>
        </Box>
      </Container>
      
      <Footer />
    </Box>
  );
};

export default MusicProducingPage;